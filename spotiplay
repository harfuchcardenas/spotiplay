#!/usr/bin/perl

use strict;  # Enforce strict variable declaration
use warnings; # Enable warnings for better debugging

# Print "Hello, World!" to the console
my $temp = '/../include';
my $current_directory = qx(pwd);
# Remove the newline character from the end of the output
chomp($current_directory);
$current_directory=$current_directory.$temp;

# Print the current directory path
print "Current directory: $current_directory\n";
# Specify the spotify_songs of your csv document with the list of songs currently been your favorites' songs on Spotify
my $spotify_songs = $current_directory.'/My Spotify Library.csv';
my @TSRC_csv;
my $TSRC_csv;
my @TSRC_mp3;
my $TSRC_mp3;
my @spotifyID;
my $spotifyID;
my $i = 0;

# Open the file for reading
open(my $fh, '<', $spotify_songs) or die "Could not open file '$spotify_songs' $!";
# Read the file line by line
while (my $line = <$fh>) {
    chomp($line);  # Remove the newline character at the end of the line
    # Split the line based on the specified character (comma in this case)
    my @strings = split(/,/, $line);
    # Print the separated strings
    $TSRC_csv[$i] = $strings[5];
    $spotifyID[$i] = $strings[6];
    $i++;
}
shift(@TSRC_csv);
shift(@spotifyID);
print "TSRCs: @TSRC_csv\nPress enter to continue"; #TSRC from CSV file from Spotify
<STDIN>;
print "SpotifyIDs: @spotifyID\nPress enter to continue"; #TSRC from CSV file from Spotify
<STDIN>;

# Close the file handle
close($fh);
my $dir_path = "/media/aharfuch/E93B-943D/Musik";
opendir(my $dh, $dir_path) or die "Cannot open directory '$dir_path': $!";
my @local_music = readdir($dh);
closedir($dh);

foreach my $file (@files) {
    next if $file eq '.' or $file eq '..'; # skip current and parent directories
    print "Found $file\n";
    <STDIN>;
}

#my @local_music= `ls *.mp3 *.wav *.flac *.aac *.ogg 2>/dev/null`;
my $size_local_music = scalar @local_music;
my @spotifyURL;
my @args;
my @fallen;

$args[0]='ffmpeg -y -i ';
$args[1]=' -f ffmetadata metadata.txt -hide_banner -loglevel quiet';
my $apos = '"';

chdir("$dir_path") or die "Can't change dir: $!";
if($size_local_music == 0) {
    print "This folder has no titles from the playlist,
all titles will be downloaded.";
    foreach (@TSRC_csv){
        my $hash =$_;
        $hash =~ tr/"//d; #Remove double quotes
        if(!system("spotdl https://open.spotify.com/track/$hash")){
            next;
        }else{
            print "It has fallen, therefore pushing to fallen.\n";
            push(@fallen,$hash);
            }
        }
    my $filename = 'fallen.txt';
    open(my $fh, '>', $filename) or die "Cannot open file '$filename': $!";
    foreach my $item (@data) {
        print $fh "$item\n"; #Each item on a new line
    }
    close($fh);
    print "Fallen have been written to fallen.txt file\n";
    exit 0;
} else {
    foreach my $line (@local_music) {
        chomp($line);
        my $ffmpeg_command =  $args[0].$apos.$line. $apos.$args[1];
        # Capture the output of the ffmpeg command
        system($ffmpeg_command);
        my $file = 'metadata.txt';
        my $search_string = 'TSRC=';
        open(my $fh2, '<', $file) or die "Cannot open file.";
        while (my $line = <$fh2>) {
            if ($line =~ /\b\Q$search_string\E\b\s*(.+)/) {
                push @TSRC_mp3, $1;
                next;
            }
        }
    }

    # Create hash to track occurrences
    my %count;
    $count{$_}++ for (@TSRC_mp3, @TSRC_csv);

    # Filter elements that appear only once (i.e., unique to one array)
    my @toDownload = grep { $count{$_} == 1 } (@TSRC_mp3, @TSRC_csv);

    print "Size of \@toDownload: $#toDownload\n";
    print "Size of \@TSRC_cvs: $#TSRC_csv\n";
    <STDIN>;
    foreach (@toDownload){
        print "To get downloaded hash: $_.\n";
        my $hash =$_;
        $hash =~ tr/"//d;
        if(!system("spotdl https://open.spotify.com/track/$hash")){
        }
    }
}
